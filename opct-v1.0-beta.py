import os
nmapcom=""
clear = lambda: os.system('clear')
wireshark = lambda: os.system('sudo wireshark')
install = lambda: os.system('sudo apt install nmap sqlmap wireshark hping3 default-jre default-jdk hydra ruby ruby-dev ettercap-graphical -y')
install2 = lambda: os.system('sudo gem install wpscan')
ac1 = lambda: os.system('sudo apt update')
ac2 = lambda: os.system('sudo apt upgrade nmap sqlmap wireshark hping3 default-jre default-jdk hydra ettercap-graphical -y')
nmap1 = lambda: os.system(nmapcom)
hping1 = lambda: os.system(hpingcom)
programa = lambda: os.system('python3 opct-v1.0-beta.py')
sqlmap1 = lambda: os.system(sqlmapcom)
zap1 = lambda: os.system('bash /usr/local/bin/zap.sh')
zapi1 = lambda: os.system('wget https://github.com/zaproxy/zaproxy/releases/download/v2.11.1/ZAP_2_11_1_unix.sh -O ZAP.sh')
zapi2 = lambda: os.system('sudo bash ./ZAP.sh')
hydra1 = lambda: os.system(hydracom)
msfi1 = lambda: os.system('wget http://downloads.metasploit.com/data/releases/metasploit-latest-linux-x64-installer.run')
msfi2 = lambda: os.system('chmod +x ./metasploit-latest-linux-x64-installer.run')
msfi3 = lambda: os.system('sudo bash metasploit-latest-linux-x64-installer.run')
msfc1 = lambda: os.system('sudo msfconsole')
msfv1 = lambda: os.system(msfcom)
wpscan1 = lambda: os.system(wpscancom)
etter1 = lambda: os.system('sudo -E ettercap -G')
class bcolors:
    OK = '\033[92m' #GREEN
    RESET = '\033[0m' #RESET COLOR
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKCYAN = '\033[96m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'
def titulo():
    t1= "\n ▒█████   ▄████▄      ██▓███  ▓█████  ███▄    █ ▄▄▄█████▓▓█████   ██████ ▄▄▄█████▓ ██▓ ███▄    █   ▄████    ▄▄▄█████▓ ▒█████   ▒█████   ██▓    \n"
    t2= "▒██▒  ██▒▒██▀ ▀█     ▓██░  ██▒▓█   ▀  ██ ▀█   █ ▓  ██▒ ▓▒▓█   ▀ ▒██    ▒ ▓  ██▒ ▓▒▓██▒ ██ ▀█   █  ██▒ ▀█▒   ▓  ██▒ ▓▒▒██▒  ██▒▒██▒  ██▒▓██▒    \n"
    t3= "▒██░  ██▒▒▓█    ▄    ▓██░ ██▓▒▒███   ▓██  ▀█ ██▒▒ ▓██░ ▒░▒███   ░ ▓██▄   ▒ ▓██░ ▒░▒██▒▓██  ▀█ ██▒▒██░▄▄▄░   ▒ ▓██░ ▒░▒██░  ██▒▒██░  ██▒▒██░    \n"
    t4= "▒██   ██░▒▓▓▄ ▄██▒   ▒██▄█▓▒ ▒▒▓█  ▄ ▓██▒  ▐▌██▒░ ▓██▓ ░ ▒▓█  ▄   ▒   ██▒░ ▓██▓ ░ ░██░▓██▒  ▐▌██▒░▓█  ██▓   ░ ▓██▓ ░ ▒██   ██░▒██   ██░▒██░    \n"
    t5= "░ ████▓▒░▒ ▓███▀ ░   ▒██▒ ░  ░░▒████▒▒██░   ▓██░  ▒██▒ ░ ░▒████▒▒██████▒▒  ▒██▒ ░ ░██░▒██░   ▓██░░▒▓███▀▒     ▒██▒ ░ ░ ████▓▒░░ ████▓▒░░██████▒\n"
    t6= "░ ▒░▒░▒░ ░ ░▒ ▒  ░   ▒▓▒░ ░  ░░░ ▒░ ░░ ▒░   ▒ ▒   ▒ ░░   ░░ ▒░ ░▒ ▒▓▒ ▒ ░  ▒ ░░   ░▓  ░ ▒░   ▒ ▒  ░▒   ▒      ▒ ░░   ░ ▒░▒░▒░ ░ ▒░▒░▒░ ░ ▒░▓  ░\n"
    t7= "  ░ ▒ ▒░   ░  ▒      ░▒ ░      ░ ░  ░░ ░░   ░ ▒░    ░     ░ ░  ░░ ░▒  ░ ░    ░     ▒ ░░ ░░   ░ ▒░  ░   ░        ░      ░ ▒ ▒░   ░ ▒ ▒░ ░ ░ ▒  ░\n"
    t8= "░ ░ ░ ▒  ░           ░░          ░      ░   ░ ░   ░         ░   ░  ░  ░    ░       ▒ ░   ░   ░ ░ ░ ░   ░      ░      ░ ░ ░ ▒  ░ ░ ░ ▒    ░ ░   \n"
    t9= "    ░ ░  ░ ░                     ░  ░         ░             ░  ░      ░            ░           ░       ░                 ░ ░      ░ ░      ░  ░\n"
    titulo=str(t1+t2+t3+t4+t5+t6+t7+t8+t9)
    return titulo
separador="-----------------------------------------------------------------------------------------------------------------------------------------------"
def menu():
    m1=bcolors.OK + "Menu Principal\n" + bcolors.RESET
    m2="➤\t1:  NMAP\n"
    m3="➤\t2:  Wireshark\n"
    m4="➤\t3:  Hping\n"
    m5="➤\t4:  Sqlmap\n"
    m6="➤\t5:  Owasp ZAP\n"
    m7="➤\t6:  Hydra\n"
    m8="➤\t7:  Msfconsole\n"
    m9="➤\t8:  Msfvenom\n"
    m10="➤\t9:  WPScan\n"
    m11="➤\t10: Ettercap\n"
    m12="➤\t11: Hashid\n"
    m13="➤\t12: Hashcat\n"

    mi="\n➤\tI: Instalar todos los programas"
    ma="\n➤\tA: Actualizar los programas"
    mf="\n➤\tF: Función de los programas"
    mx="\n➤\tX: Salir\n"
    menu=m1+m2+m3+m4+m5+m6+m7+m8+m9+m10+m11+mi+ma+mf+mx
    return menu
def nmapmenu():
    m1="  ___   ____ ____ _____     _   _ __  __    _    ____  \n"
    m2=" / _ \ / ___|  _ |_   _|   | \ | |  \/  |  / \  |  _ \ \n"
    m3="| | | | |   | |_) || |_____|  \| | |\/| | / _ \ | |_) |\n"
    m4="| |_| | |___|  __/ | |_____| |\  | |  | |/ ___ \|  __/ \n"
    m5=" \___/ \____|_|    |_|     |_| \_|_|  |_/_/   \_|_|    \n\n"
    m6="---------------------------------------------------------\n"
    m7=bcolors.OK + "Menu NMAP" + bcolors.RESET
    nmapmenu=m1+m2+m3+m4+m5+m6+m7
    return nmapmenu
def hpingmenu():
    m1="  ___   ____ ____ _____     _   _ ____ ___ _   _  ____ \n"
    m2=" / _ \ / ___|  _ |_   _|   | | | |  _ |_ _| \ | |/ ___|\n"
    m3="| | | | |   | |_) || |_____| |_| | |_) | ||  \| | |  _ \n"
    m4="| |_| | |___|  __/ | |_____|  _  |  __/| || |\  | |_| |\n"
    m5=" \___/ \____|_|    |_|     |_| |_|_|  |___|_| \_|\____|\n\n"
    m6="-------------------------------------------------------\n"
    m7=bcolors.OK + "Menu HPING" + bcolors.RESET
    hpingmenu=m1+m2+m3+m4+m5+m6+m7
    return hpingmenu
def sqlmenu():
    m1="  ___   ____ ____ _____     ____   ___  _     __  __    _    ____  \n"
    m2=" / _ \ / ___|  _ |_   _|   / ___| / _ \| |   |  \/  |  / \  |  _ \ \n"
    m3="| | | | |   | |_) || |_____\___ \| | | | |   | |\/| | / _ \ | |_) |\n"
    m4="| |_| | |___|  __/ | |_____ ___) | |_| | |___| |  | |/ ___ \|  __/ \n"
    m5=" \___/ \____|_|    |_|     |____/ \__\_|_____|_|  |_/_/   \_|_|    \n\n"
    m6="-------------------------------------------------------------------\n"
    m7=bcolors.OK + "Menu SQLMAP" + bcolors.RESET
    sqlmenu=m1+m2+m3+m4+m5+m6+m7
    return sqlmenu
def funmenu():
    m1="  ___   ____ ____ _____     _____ _   _ _   _  ____ ___ ___  _   _    _    __  __ ___ _____ _   _ _____ ___  \n"
    m2=" / _ \ / ___|  _ |_   _|   |  ___| | | | \ | |/ ___|_ _/ _ \| \ | |  / \  |  \/  |_ _| ____| \ | |_   _/ _ \ \n"
    m3="| | | | |   | |_) || |_____| |_  | | | |  \| | |    | | | | |  \| | / _ \ | |\/| || ||  _| |  \| | | || | | |\n"
    m4="| |_| | |___|  __/ | |_____|  _| | |_| | |\  | |___ | | |_| | |\  |/ ___ \| |  | || || |___| |\  | | || |_| |\n"
    m5=" \___/ \____|_|    |_|     |_|    \___/|_| \_|\____|___\___/|_| \_/_/   \_|_|  |_|___|_____|_| \_| |_| \___/ \n\n"
    m6="-------------------------------------------------------------------------------------------------------------"
    funmenu=m1+m2+m3+m4+m5+m6
    return funmenu
def hydramenu():
    m1="  ___   ____ ____ _____     _   ___   ______  ____     _    \n"
    m2=" / _ \ / ___|  _ |_   _|   | | | \ \ / |  _ \|  _ \   / \   \n"
    m3="| | | | |   | |_) || |_____| |_| |\ V /| | | | |_) | / _ \  \n"
    m4="| |_| | |___|  __/ | |_____|  _  | | | | |_| |  _ < / ___ \ \n"
    m5=" \___/ \____|_|    |_|     |_| |_| |_| |____/|_| \_/_/   \_\ \n\n"
    m6="------------------------------------------------------------"
    hydramenu=m1+m2+m3+m4+m5+m6
    return hydramenu
def msfvmenu():
    m1="  ___   ____ ____ _____     __  __ ____  _______     _______ _   _  ___  __  __ \n"
    m2=" / _ \ / ___|  _ |_   _|   |  \/  / ___||  ___\ \   / | ____| \ | |/ _ \|  \/  |\n"
    m3="| | | | |   | |_) || |_____| |\/| \___ \| |_   \ \ / /|  _| |  \| | | | | |\/| |\n"
    m4="| |_| | |___|  __/ | |_____| |  | |___) |  _|   \ V / | |___| |\  | |_| | |  | |\n"
    m5=" \___/ \____|_|    |_|     |_|  |_|____/|_|      \_/  |_____|_| \_|\___/|_|  |_|\n\n"
    m6="--------------------------------------------------------------------------------"
    msfvmenu=m1+m2+m3+m4+m5+m6
    return msfvmenu
def wpscanmenu():
    m1="  ___   ____ ____ _____  __        ______  ____   ____    _    _   _ \n"
    m2=" / _ \ / ___|  _ |_   _| \ \      / |  _ \/ ___| / ___|  / \  | \ | |\n"
    m3="| | | | |   | |_) || |____\ \ /\ / /| |_) \___ \| |     / _ \ |  \| |\n"
    m4="| |_| | |___|  __/ | |_____\ V  V / |  __/ ___) | |___ / ___ \| |\  |\n"
    m5=" \___/ \____|_|    |_|      \_/\_/  |_|   |____/ \____/_/   \_|_| \_|\n\n"
    m6="---------------------------------------------------------------------"
    wpscanmenu=m1+m2+m3+m4+m5+m6
    return wpscanmenu
def fun():
    m1=bcolors.OK + "Funcionamiento\n" + bcolors.RESET
    m2="➤\tNMAP: Permite mapear la red a la que estas conectado. Puedes ver las IP, las MAC, los puertos abiertos o los sistema operativos de los diferentes dispositivos conectados.\n"
    m3="➤\tWireshark: Permite interceptar, ver todos los paquetes que pasan por la red y saber que protocolos usan\n"
    m4="➤\tHping: Permite hacer ataques de denegación de servicio\n"
    m5="➤\tSqlmap: Permite hacer inyecciones SQL\n"
    m6="➤\tOwasp ZAP: Permite ver las vulnerabilidades de un servicio web\n\n"
    m7="OC Pentesting Tool - Creado por Oscar García y Christian Padilla"
    fun=m1+m2+m3+m4+m5+m6+m7
    return fun
clear()
print(titulo())
print(separador)
print(menu())
menusel=input(bcolors.OK + "Selecciona que hacer: " + bcolors.RESET)
if menusel=="I" or menusel=="i":
    ac1()
    install()
    install2()
    zapi1()
    zapi2()
    msfi1()
    msfi2()
    msfi3()
    enter=input("Pulsa [ENTER] para continuar")
    programa()
elif menusel=="X" or menusel=="x":
    sal=input(bcolors.FAIL + "\nSeguro que quieres salir? [y/N]: " + bcolors.RESET)
    if sal=="Y" or sal=="y":
        clear()
    else:
        clear()
        programa()
elif menusel=="F" or menusel=="f":
    clear()
    print(funmenu())
    print(fun())
    enter=input("Pulsa [ENTER] para continuar")
    programa()
elif menusel=="A" or menusel=="a":
    ac1()
    ac2()
    enter=input("Pulsa [ENTER] para continuar")
    programa()
elif menusel=="1": #NMAP
    clear()
    print(nmapmenu())
    print("➤\t1: Escribir comando de NMAP\n➤\t2: NMAP guiado\n➤\t3: Ver manual\n\n➤\tX: Salir\n")
    nmapsel=input(bcolors.OK + "Selecciona que hacer: " + bcolors.RESET)
    if nmapsel=="x" or nmapsel=="X":
        programa()
    elif nmapsel=="1":
        nmapcom=input("Escribe el comando de NMAP: ")
        nmap1()
        programa()
    elif nmapsel=="3":
        nmapcom="nmap -h"
        nmap1()
        enter=input("Pulsa [ENTER] para continuar")
        programa()
    elif nmapsel=="2":
        nip=input("Que IP quieres atacar?: ")
        sn=input("Quieres escanear los puertos? [Y/n]: ")
        if sn=="n" or sn=="N":
            nsn=" -sn "
            nport=""
        else:
            nsn=""
            port=input("Que rango de puertos quieres escanear? [Primer puerto-Utimo puerto, *=Todos los puertos]: ")
            if port=="*" or port=="":
                nport="" 
            else:
                nport=" -p "+port
        nos=input("Quieres escanear el sistema operativo? [Y/n]: ")
        if nos=="y" or nos=="Y":
            nos=" -O "
        else:
            nos=""    

    nmapcom="sudo nmap "+nip+""+nsn+nport+nos
    print("\n"+bcolors.BOLD+bcolors.OKCYAN+nmapcom+bcolors.RESET)
    nmap1() 
    enter=input("Pulsa [ENTER] para continuar")
    programa()
elif menusel=="2": #WIRESHARK
    wireshark()
    programa()
elif menusel=="3": #HPING3
    clear()
    print(hpingmenu())
    print("➤\t1: Escribir comando de Hping3\n➤\t2: Hping3 guiado\n➤\t3: Ver manual\n\n➤\tX: Salir\n")
    hpingsel=input(bcolors.OK + "Selecciona que hacer: " + bcolors.RESET)
    if hpingsel=='1':
        hpingcom=input("Escribe el comando de Hping3: ")
        hping1()
        programa()
    if hpingsel=='3':
        hpingcom="hping3 --help"
        hping1()
        enter=input("Pulsa [ENTER] para continuar")
        programa()
    if hpingsel=='2':
        hip=input("Inserta la IP a atacar: ")
        hport="-p "+input("Inserta que puerto quieres atacar: ")
        print("\n➤\t0: Raw IP\n➤\t1: ICMP\n➤\t2: UDP\n➤\t8: Scan\n➤\t9: Listen\n➤\tS: Activar SYN Flag\n")
        hmode="-"+input(bcolors.OK + "Inserta el mode de atac: " + bcolors.RESET)
        flood=input("Quieres hacer un ataque flood? [Y/n]: ")
        if flood!="n" or flood!="N":
            hflood="--flood"
        else:
            hflood=""
        mask=input("Quieres enmascarar tu IP? [Y/n]: ")
        if mask=="y" or mask=="Y":
            mask2="\n➤\t1: Sel·leccionar una IP\n➤\t2: IP random\nComo quieres enmascarar tu IP?: "
            if mask2!=1 or mask2!="1":
                hmask="-a "+input("Escribe que ip quieres que se muestre: ")+" "
            else:
                hmask="--rand-source "
        else:
            hmask=""
        hpingcom="sudo hping3"+" "+hport+" "+hmode+" "+hflood+" "+hmask+hip
    if hpingsel=="x" or hpingsel=="X":
        programa()
    print("\n"+bcolors.BOLD+bcolors.OKCYAN+hpingcom+bcolors.RESET)
    hping1()
    enter=input("Pulsa [ENTER] para continuar")
    programa()
elif menusel=="4": #SQLMAP
    clear()
    print(sqlmenu())
    print("➤\t1: Escribir comando de Sqlmap\n➤\t2: Sqlmap guiado\n➤\t3: Ver manual\n\n➤\tX: Salir\n")
    sqlmapsel=input(bcolors.OK + "Selecciona que hacer: " + bcolors.RESET)
    if sqlmapsel=='1':
        sqlmapcom=input("Escribe el comando de Sqlmap: ")
        sqlmap1()
        programa()
    if sqlmapsel=='3':
        sqlmapcom="sqlmap -h"
        sqlmap1()
        enter=input("Pulsa [ENTER] para continuar")
        programa()
    if sqlmapsel=='2':
        print("➤\t1: Listar bases de datos\n➤\t2: Listar tablas\n➤\t3: dumpear informacion de una tabla\n➤\t4: Conseguir shell de SQL\n➤\t5: Conseguir shell del sistema\n➤\t6: Ejecutar consultas directamente\n")
        sqlmapsel2=int(input(bcolors.OK + "Selecciona que hacer: " + bcolors.RESET))
        if sqlmapsel2==1:
            sqlip=input("Inserta la direccion IP de la base de datos: ")
            sqllvl="--level="+input("Inserta el nivel de los testeos [1-5]: ")
            sqlrsk="--risk="+input("Inserta el riesgo de los testeos [1-3]: ")
            sqlmapcom="sudo sqlmap --dbms=mysql -u "+sqlip+" "+sqllvl+" "+sqlrsk+" --dbs"
            print("\n"+bcolors.BOLD+bcolors.OKCYAN+sqlmapcom+bcolors.RESET)
            sqlmap1()
            enter=input("Pulsa [ENTER] para continuar")
            programa()
        if sqlmapsel2==2:
            sqlip=input("Inserta la direccion IP de la base de datos: ")
            sqltab="-D "+input("Inserta el nombre de la base de datos: ")
            sqllvl="--level="+input("Inserta el nivel de los testeos [1-5]: ")
            sqlrsk="--risk="+input("Inserta el riesgo de los testeos [1-3]: ")
            sqlmapcom="sudo sqlmap --dbms=mysql -u "+sqlip+" "+sqllvl+" "+sqlrsk+" "+sqltab+" --tables"
            print("\n"+bcolors.BOLD+bcolors.OKCYAN+sqlmapcom+bcolors.RESET)
            sqlmap1()
            enter=input("Pulsa [ENTER] para continuar")
            programa()
    elif sqlmapsel=="x" or sqlmapsel=="X":
        programa()
elif menusel=="5": #OWASP ZAP
    zap1()
    programa()
elif menusel=="6": #HYDRA
    clear()
    print(hydramenu())
    print("➤\t1: Escribir comando de Hydra\n➤\t2: Hydra guiado\n➤\t3: Ver manual\n\n➤\tX: Salir\n")
    hydrasel=input(bcolors.OK + "Selecciona que hacer: " + bcolors.RESET)
    if hydrasel=='1':
        hydracom=input("Escribe el comando de Hydra: ")
        hydra1()
        programa()
    if hydrasel=='3':
        hydracom="hydra -h"
        hydra1()
        enter=input("Pulsa [ENTER] para continuar")
        programa()
    if hydrasel=='2':
        h1="-P "+input("Escribe la ruta de el diccionario de contraseñas que quieras utilizar: ")
        print("\n➤\t1: Usar un nombre de usuario\n➤\t2: Usar un diccionario de usuarios\n\n➤\tX: Salir\n")
        hydrasel2=input(bcolors.OK + "Selecciona que hacer: " + bcolors.RESET)
        if hydrasel2=='x' or hydrasel2=='X':
            programa()       
        elif hydrasel2=='1':
            h2="-l "+input("Escribe el nombre de usuario quieras utilizar: ")
        else:
            h2="-L "+input("Escribe la ruta de el diccionario de usuarios quieras utilizar: ")
        h3=input("Inserta la direccion que quieres atacar: ")
        hydrasel3=input("Quieres atacar a través de ssh? [y/N]: ")
        if hydrasel3=="Y" or hydrasel3=="y":
            h4="ssh"
        else:
            h4=""
        hydracom="sudo hydra "+h2+" "+h1+" "+h3+" "+h4
        print("\n"+bcolors.BOLD+bcolors.OKCYAN+hydracom+bcolors.RESET)
        hydra1()
        enter=input("Pulsa [ENTER] para continuar")
        programa()
    if hydrasel=="x" or hydrasel=="X":
        programa()
elif menusel=="7": #MSFCONSOLE
    msfc1()
    programa()
elif menusel=="8": #MSFVENOM
    clear()
    print(msfvmenu())
    print("➤\t1: Escribir comando de Msfvenom\n➤\t2: Msfvenom guiado\n➤\t3: Ver manual\n\n➤\tX: Salir\n")
    msfsel=input(bcolors.OK + "Selecciona que hacer: " + bcolors.RESET)
    if msfsel=="x" or msfsel=="X":
        programa()
    elif msfsel=='1':
        msfcom=input("Escribe el comando de Msfvenom: ")
        msfv1(msfcom)
        programa()
    elif msfsel=='3':
        msfcom="msfvenom -h"
        msfv1()
        enter=input("Pulsa [ENTER] para continuar")
        programa()
    elif msfsel=='2':
        print("\n➤\t1: Listar payloads\n➤\t2: Crear payload\n\n➤\tX: Salir\n")
        msfsel2=input(bcolors.OK + "Selecciona que hacer: " + bcolors.RESET)
        if msfsel2=='x' or msfsel2=='X':
            programa()       
        elif msfsel2=="1":
            m1="-l payloads"
        elif msfsel2=="2":
            m2="-p "+input('Escribe el payload que quieres usar: ')
            m3="-f "+input('Escribe la extensión a la que quieres exportar el archivo: ')
            m4="-o "+input('Escribe que nombre va a tener el archivo: ')
            m1=m2+" "+m3+" "+m4
        msfcom="sudo msfvenom "+m1
        print("\n"+bcolors.BOLD+bcolors.OKCYAN+msfcom+bcolors.RESET)
        msfv1()
        enter=input("Pulsa [ENTER] para continuar")
        programa()
elif menusel=="9": #WPSCAN
    clear()
    print(wpscanmenu())
    print("➤\t1: Escribir comando de WPScan\n➤\t2: Wpscan guiado\n➤\t3: Ver manual\n\n➤\tX: Salir\n")
    wpscansel=input(bcolors.OK + "Selecciona que hacer: " + bcolors.RESET)
    if wpscansel=="x" or wpscansel=="X":
        programa()
    elif wpscansel=='1':
        wpscancom=input('EScribe el comando de WPScan: ')
        wpscan1()       
        programa()
    elif wpscansel=='3':
        wpscancom="wpscan -h"
        wpscan1()
        enter=input("Pulsa [ENTER] para continuar")        
        programa()
elif menusel=="10": #ETTERCAP
    etter1()
    programa()
    
